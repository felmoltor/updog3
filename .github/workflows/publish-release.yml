name: Publish Docker Image and PyPI Package

on:
  push:
    tags:
      - 'v*'  # Triggers only on tags starting with 'v'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Replace version in files
        run: |
          sed -i 's/\$\$VERSION\$\$/'"${{ env.VERSION }}"'/g' updog3/__init__.py
          sed -i 's/\$\$VERSION\$\$/'"${{ env.VERSION }}"'/g' setup.py
        shell: bash

      - name: Build and push Docker image for multi-platform
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64  # Specify both amd64 and arm64 platforms
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.VERSION }}
            ghcr.io/${{ github.repository }}:latest
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}

      - name: Verify image pushed to GHCR
        run: echo "Image pushed to ghcr.io/${{ github.repository }}:${{ env.VERSION }}"
  
  publish-pypi:
    needs: [build-and-push]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Use your desired Python version

      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Replace version in files
        run: |
          sed -i "s/\\$\\$VERSION\\$\\$/${{ env.VERSION }}/g" updog3/__init__.py
          sed -i "s/\\$\\$VERSION\\$\\$/${{ env.VERSION }}/g" setup.py
        shell: bash

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: python -m twine upload dist/*
